------------------------------------
-------------- JSON ----------------
------------------------------------

SELECT EXPORT_USERS_TO_JSON_FILE('E:/POSTGRESQL/14/DATA/JSON/USERS.JSON');

------------- EXPORT ---------------
CREATE OR REPLACE FUNCTION EXPORT_USERS_TO_JSON_FILE(FILE_PATH TEXT)
RETURNS VOID AS
$$
DECLARE
  JSON_DATA JSON;
BEGIN
  SELECT JSON_AGG(ROW_TO_JSON(USERS)) INTO JSON_DATA FROM USERS;
  PERFORM PG_FILE_WRITE(FILE_PATH, JSON_DATA::TEXT,'TRUE');
END;
$$
LANGUAGE PLPGSQL;



SELECT IMPORT_USERS_FROM_JSON_FILE('E:/POSTGRESQL/14/DATA/JSON/USERS.JSON');

------------- IMPORT --------------- 
CREATE OR REPLACE FUNCTION IMPORT_USERS_FROM_JSON_FILE(FILE_PATH TEXT)
RETURNS TABLE (
  USER_ID INTEGER,
  USER_NAME VARCHAR(255),
  USER_IMG BYTEA,
  USER_EMAIL VARCHAR(255),
  USER_PASSWORD VARCHAR(255),
  USER_DATE_OF_BIRTH DATE,
  USER_ROLE_ID INTEGER
) AS $$
DECLARE
  JSON_DATA JSON;
  USER_DATA JSON;
BEGIN
  JSON_DATA := PG_READ_FILE(FILE_PATH, 0, 1000000000)::JSON;
  
 DROP TABLE IF EXISTS TEMP_ROLES;
CREATE TEMP TABLE TEMP_ROLES (
    ROLE_ID SERIAL PRIMARY KEY,
    ROLE_NAME VARCHAR(255) NOT NULL UNIQUE
);

  INSERT INTO TEMP_ROLES(ROLE_NAME)
  VALUES('ADMIN'),('USER');
  
   DROP TABLE IF EXISTS TEMP_USERS;
  CREATE TEMP TABLE TEMP_USERS (
    USER_ID SERIAL PRIMARY KEY,
    USER_NAME VARCHAR(255) NOT NULL,
    USER_IMG BYTEA,
    USER_EMAIL VARCHAR(255) UNIQUE NOT NULL,
    USER_PASSWORD VARCHAR(255) NOT NULL,
    USER_DATE_OF_BIRTH DATE,
    USER_ROLE_ID INTEGER,
    CONSTRAINT FK_USER_ROLE FOREIGN KEY (USER_ROLE_ID) REFERENCES TEMP_ROLES (ROLE_ID)
  );
  
  FOR USER_DATA IN SELECT * FROM JSON_ARRAY_ELEMENTS(JSON_DATA)
  LOOP
  INSERT INTO TEMP_USERS (USER_NAME, USER_EMAIL, USER_PASSWORD, USER_DATE_OF_BIRTH, USER_ROLE_ID)
    VALUES (
      USER_DATA->>'USER_NAME', 
      USER_DATA->>'USER_EMAIL', 
      USER_DATA->>'USER_PASSWORD', 
      TO_DATE(USER_DATA->>'USER_DATE_OF_BIRTH', 'YYYY-MM-DD'), 
      CAST(USER_DATA->>'USER_ROLE_ID' AS INTEGER)
  );
  END LOOP;
  
  RETURN QUERY SELECT * FROM TEMP_USERS;

END;
$$ LANGUAGE PLPGSQL;


------------------------------------
-------------- XML -----------------
------------------------------------



SELECT EXPORT_USERS_TO_XML_FILE('E:/POSTGRESQL/14/DATA/XML/USERS.XML');
------------- EXPORT ---------------
CREATE OR REPLACE FUNCTION EXPORT_USERS_TO_XML_FILE(FILE_PATH TEXT)
RETURNS VOID AS
$$
DECLARE
  XML_DATA XML;
BEGIN
  SELECT XMLELEMENT(NAME "USERS", XMLAGG(XMLELEMENT(NAME "USER", 
    XMLFOREST(USER_ID, USER_NAME, USER_EMAIL, USER_DATE_OF_BIRTH, USER_ROLE_ID)))) INTO XML_DATA FROM USERS;
  PERFORM PG_FILE_WRITE(FILE_PATH, XML_DATA::TEXT,'TRUE');
END;
$$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION EXPORT_USERS_TO_XML_FILE(FILE_PATH TEXT)
RETURNS VOID AS
$$
DECLARE
  XML_DATA XML;
BEGIN
  SELECT XMLELEMENT(NAME "USERS", XMLAGG(XMLELEMENT(NAME "USER", 
    XMLFOREST(USER_ID, USER_NAME, USER_EMAIL, USER_DATE_OF_BIRTH, USER_ROLE_ID)))) INTO XML_DATA FROM USERS;

  XML_DATA := FORMAT('<?XML VERSION="1.0" ENCODING="UTF-8"?>%S', XML_DATA::TEXT);

  PERFORM PG_FILE_WRITE(FILE_PATH, XML_DATA::TEXT,'TRUE');
END;
$$
LANGUAGE PLPGSQL;


SELECT   IMPORT_USERS_FROM_XML_FILE('E:/POSTGRESQL/14/DATA/XML/USERS.XML');
------------- IMPORT --------------- 
CREATE OR REPLACE FUNCTION IMPORT_USERS_FROM_XML_FILE(FILE_PATH TEXT)
RETURNS TABLE (
    USER_NAME VARCHAR(255),
    USER_EMAIL VARCHAR(255),
    USER_PASSWORD VARCHAR(255),
    USER_DATE_OF_BIRTH DATE,
    USER_ROLE_ID INTEGER
) AS $$
DECLARE
    XML_DATA XML;
    USER_DATA RECORD;
BEGIN
 DROP TABLE IF EXISTS TEMP_USERS;
    CREATE TEMP TABLE TEMP_USERS (
        USER_NAME VARCHAR(255),
        USER_EMAIL VARCHAR(255),
        USER_PASSWORD VARCHAR(255),
        USER_DATE_OF_BIRTH DATE,
        USER_ROLE_ID INTEGER
    );
    
    XML_DATA := XMLPARSE(DOCUMENT CONVERT_FROM(PG_READ_BINARY_FILE(FILE_PATH), 'UTF8'));
    
    FOR USER_DATA IN SELECT * FROM XMLTABLE('/USERS/USER' PASSING XML_DATA COLUMNS
        USER_NAME VARCHAR(255) PATH 'USER_NAME',
        USER_EMAIL VARCHAR(255) PATH 'USER_EMAIL',
        USER_PASSWORD VARCHAR(255) PATH 'USER_PASSWORD',
        USER_DATE_OF_BIRTH DATE PATH 'USER_DATE_OF_BIRTH',
        USER_ROLE_ID INTEGER PATH 'USER_ROLE_ID'
    ) LOOP
        INSERT INTO TEMP_USERS (USER_NAME, USER_EMAIL, USER_PASSWORD, USER_DATE_OF_BIRTH, USER_ROLE_ID)
        VALUES (
            USER_DATA.USER_NAME,
            USER_DATA.USER_EMAIL,
            USER_DATA.USER_PASSWORD,
            USER_DATA.USER_DATE_OF_BIRTH,
            USER_DATA.USER_ROLE_ID
        );
    END LOOP;

    RETURN QUERY SELECT * FROM TEMP_USERS;
END;
$$ LANGUAGE PLPGSQL;
------------- END ---------------





